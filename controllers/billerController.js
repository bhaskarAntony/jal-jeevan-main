const User = require('../models/User');
const GramPanchayat = require('../models/GramPanchayat');
const Village = require('../models/Village');
const House = require('../models/House');
const WaterBill = require('../models/WaterBill');
const Payment = require('../models/Payment');
const { calculateWaterBill } = require('../utils/billCalculator');
const { generateBillPDF, generateReceiptPDF } = require('../utils/pdfGenerator');
const { generatePaymentQR } = require('../utils/qrCodeGenerator');
const moment = require('moment');
const mongoose = require('mongoose');

// Helper function to round to 2 decimal places
const roundToTwo = (num) => Math.round((num + Number.EPSILON) * 100) / 100;

// @desc    Get biller dashboard data
// @route   GET /api/biller/dashboard
// @access  Private (Mobile User/Biller)
const getDashboard = async (req, res) => {
  try {
    const gpId = req.user.gramPanchayat._id;
    const currentMonth = moment().format('MMMM');
    const currentYear = moment().year();

    const totalVillages = await Village.countDocuments({ 
      gramPanchayat: gpId, 
      isActive: true 
    });

    const totalHouses = await House.countDocuments({ 
      gramPanchayat: gpId, 
      isActive: true 
    });

    // Current month bills generated by this biller
    const monthlyBills = await WaterBill.find({
      gramPanchayat: gpId,
      month: currentMonth,
      year: currentYear
    });

    const thisMonthCollection = roundToTwo(monthlyBills.reduce((sum, bill) => sum + bill.paidAmount, 0));
    const paidBills = monthlyBills.filter(bill => bill.status === 'paid').length;
    const unpaidBills = monthlyBills.filter(bill => bill.status === 'pending').length;

    // Recent bills generated by this biller
    const recentBills = await WaterBill.find({
      gramPanchayat: gpId
    })
      .populate({
        path: 'house',
        populate: {
          path: 'village'
        }
      })
      .limit(10)
      .sort({ createdAt: -1 });

    // Get full GP data
    const gramPanchayat = await GramPanchayat.findById(gpId);

    res.json({
      success: true,
      data: {
        totalVillages,
        totalHouses,
        thisMonthCollection,
        paidBills,
        unpaidBills,
        recentBills,
        gramPanchayat: {
          id: gramPanchayat._id,
          gramPanchayatId: gramPanchayat._id,
          name: gramPanchayat.name,
          uniqueId: gramPanchayat.uniqueId,
          district: gramPanchayat.district,
          taluk: gramPanchayat.taluk,
          address: gramPanchayat.address,
          pincode: gramPanchayat.pincode,
          state: gramPanchayat.state,
          contactPerson: gramPanchayat.contactPerson,
          waterTariff: gramPanchayat.waterTariff,
          qrCodeData: gramPanchayat.qrCodeData
        }
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

// @desc    Search bills/customers by various criteria
// @route   GET /api/biller/search
// @access  Private (Mobile User/Biller)
const searchCustomers = async (req, res) => {
  try {
    const { query, page = 1, limit = 10 } = req.query;
    const gpId = req.user.gramPanchayat._id;

    if (!query || query.trim().length < 2) {
      return res.status(400).json({
        success: false,
        message: 'Search query must be at least 2 characters long'
      });
    }

    // Search houses first by multiple criteria with proper population
    const houses = await House.find({
      gramPanchayat: gpId,
      isActive: true,
      $or: [
        { ownerName: { $regex: query, $options: 'i' } },
        { waterMeterNumber: { $regex: query, $options: 'i' } },
        { aadhaarNumber: { $regex: query, $options: 'i' } },
        { mobileNumber: { $regex: query, $options: 'i' } }
      ]
    })
    .populate('village')
    .limit(limit * 1)
    .skip((page - 1) * limit)
    .lean(); // Use lean() for better performance

    if (houses.length === 0) {
      return res.json({
        success: true,
        data: {
          houses: [],
          pagination: {
            current: 1,
            total: 0,
            count: 0,
            totalRecords: 0
          }
        }
      });
    }

    // Get latest bills for each house with enhanced null safety
    const housesWithBills = await Promise.all(
      houses.map(async (house) => {
        try {
          // Ensure house and village exist
          if (!house || !house._id) {
            console.warn('Invalid house data found:', house);
            return null;
          }

          const latestBill = await WaterBill.findOne({
            house: house._id
          }).sort({ createdAt: -1 }).lean();

          const unpaidBillsCount = await WaterBill.countDocuments({
            house: house._id,
            status: { $in: ['pending', 'partial'] }
          });

          // Enhanced null safety for village data
          const villageData = house.village ? {
            _id: house.village._id,
            id: house.village._id,
            villageId: house.village._id,
            name: house.village.name || 'Unknown Village',
            uniqueId: house.village.uniqueId || '',
            population: house.village.population || 0
          } : {
            _id: null,
            id: null,
            villageId: null,
            name: 'Village Not Found',
            uniqueId: '',
            population: 0
          };

          return {
            _id: house._id,
            id: house._id,
            houseId: house._id,
            ownerName: house.ownerName || '',
            aadhaarNumber: house.aadhaarNumber || '',
            mobileNumber: house.mobileNumber || '',
            address: house.address || '',
            waterMeterNumber: house.waterMeterNumber || '',
            previousMeterReading: house.previousMeterReading || 0,
            sequenceNumber: house.sequenceNumber || '',
            usageType: house.usageType || 'residential',
            propertyNumber: house.propertyNumber || '',
            isActive: house.isActive !== false,
            createdAt: house.createdAt,
            updatedAt: house.updatedAt,
            village: villageData,
            latestBill: latestBill ? {
              ...latestBill,
              amount: roundToTwo(latestBill.totalAmount || 0),
              billAmount: roundToTwo(latestBill.totalAmount || 0),
              paid: roundToTwo(latestBill.paidAmount || 0),
              remaining: roundToTwo(latestBill.remainingAmount || 0)
            } : null,
            unpaidBillsCount,
            canGenerateNewBill: true
          };
        } catch (error) {
          console.error('Error processing house:', house._id, error);
          return null;
        }
      })
    );

    // Filter out null results from failed processing
    const validHouses = housesWithBills.filter(house => house !== null);

    const total = await House.countDocuments({
      gramPanchayat: gpId,
      isActive: true,
      $or: [
        { ownerName: { $regex: query, $options: 'i' } },
        { waterMeterNumber: { $regex: query, $options: 'i' } },
        { aadhaarNumber: { $regex: query, $options: 'i' } },
        { mobileNumber: { $regex: query, $options: 'i' } }
      ]
    });

    res.json({
      success: true,
      data: {
        houses: validHouses,
        pagination: {
          current: parseInt(page),
          total: Math.ceil(total / limit),
          count: validHouses.length,
          totalRecords: total
        }
      }
    });
  } catch (error) {
    console.error('Search customers error:', error);
    res.status(500).json({
      success: false,
      message: 'Search failed',
      error: error.message
    });
  }
};

// @desc    Get villages for house creation
// @route   GET /api/biller/villages
// @access  Private (Mobile User/Biller)
const getVillages = async (req, res) => {
  try {
    const gpId = req.user.gramPanchayat._id;

    const villages = await Village.find({
      gramPanchayat: gpId,
      isActive: true
    }).sort({ name: 1 });

    const gramPanchayat = await GramPanchayat.findById(gpId);

    // Transform villages to include villageId
    const transformedVillages = villages.map(village => ({
      ...village.toObject(),
      villageId: village._id
    }));

    res.json({
      success: true,
      data: {
        villages: transformedVillages,
        gramPanchayat: {
          id: gramPanchayat._id,
          gramPanchayatId: gramPanchayat._id,
          name: gramPanchayat.name,
          uniqueId: gramPanchayat.uniqueId,
          district: gramPanchayat.district,
          taluk: gramPanchayat.taluk
        }
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

// @desc    Create new house
// @route   POST /api/biller/houses
// @access  Private (Mobile User/Biller)
const createHouse = async (req, res) => {
  try {
    const {
      village,
      villageId,
      ownerName,
      aadhaarNumber,
      mobileNumber,
      address,
      waterMeterNumber,
      previousMeterReading,
      usageType,
      propertyNumber
    } = req.body;

    const gpId = req.user.gramPanchayat._id;

    // Use villageId if provided, otherwise use village
    const selectedVillageId = villageId || village;

    // Validate required fields
    if (!selectedVillageId || !ownerName || !aadhaarNumber || !mobileNumber || !address || !waterMeterNumber || !usageType || !propertyNumber) {
      return res.status(400).json({
        success: false,
        message: 'All required fields must be provided'
      });
    }

    // Validate village ObjectId format
    if (!mongoose.Types.ObjectId.isValid(selectedVillageId)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid village ID format'
      });
    }

    // Check if meter number already exists in this GP
    const existingHouse = await House.findOne({
      waterMeterNumber,
      gramPanchayat: gpId,
      isActive: true
    });

    if (existingHouse) {
      return res.status(400).json({
        success: false,
        message: 'House with this meter number already exists in this Gram Panchayat'
      });
    }

    // Verify village belongs to this GP
    const villageDoc = await Village.findOne({
      _id: selectedVillageId,
      gramPanchayat: gpId,
      isActive: true
    });

    if (!villageDoc) {
      return res.status(400).json({
        success: false,
        message: 'Village not found or does not belong to your Gram Panchayat'
      });
    }

    // Validate usage type
    const validUsageTypes = ['residential', 'commercial', 'institutional', 'industrial'];
    if (!validUsageTypes.includes(usageType)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid usage type. Must be one of: residential, commercial, institutional, industrial'
      });
    }

    const house = new House({
      village: new mongoose.Types.ObjectId(selectedVillageId),
      gramPanchayat: gpId,
      ownerName: ownerName.trim(),
      aadhaarNumber: aadhaarNumber.trim(),
      mobileNumber: mobileNumber.trim(),
      address: address.trim(),
      waterMeterNumber: waterMeterNumber.trim(),
      previousMeterReading: parseFloat(previousMeterReading) || 0,
      sequenceNumber: `SEQ${Date.now()}`, // Auto-generate sequence number
      usageType,
      propertyNumber: propertyNumber.trim()
    });

    await house.save();

    const populatedHouse = await House.findById(house._id).populate('village');

    res.status(201).json({
      success: true,
      message: 'House created successfully',
      data: {
        ...populatedHouse.toObject(),
        village: {
          ...populatedHouse.village.toObject(),
          villageId: populatedHouse.village._id
        }
      }
    });
  } catch (error) {
    console.error('House creation error:', error);
    
    // Handle mongoose validation errors
    if (error.name === 'ValidationError') {
      const errors = Object.values(error.errors).map(err => err.message);
      return res.status(400).json({
        success: false,
        message: 'Validation error',
        errors
      });
    }

    // Handle duplicate key errors
    if (error.code === 11000) {
      return res.status(400).json({
        success: false,
        message: 'Water meter number already exists'
      });
    }

    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

// @desc    Get house details for bill generation
// @route   GET /api/biller/houses/:houseId
// @access  Private (Mobile User/Biller)
const getHouseDetails = async (req, res) => {
  try {
    const { houseId } = req.params;
    const gpId = req.user.gramPanchayat._id;

    // Validate houseId format
    if (!mongoose.Types.ObjectId.isValid(houseId)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid house ID format'
      });
    }

    const house = await House.findOne({
      _id: houseId,
      gramPanchayat: gpId,
      isActive: true
    }).populate('village');

    if (!house) {
      return res.status(404).json({
        success: false,
        message: 'House not found or does not belong to your Gram Panchayat'
      });
    }

    // Get latest bill for this house
    const latestBill = await WaterBill.findOne({
      house: house._id
    }).sort({ createdAt: -1 });

    // Get unpaid bills count
    const unpaidBillsCount = await WaterBill.countDocuments({
      house: house._id,
      status: { $in: ['pending', 'partial'] }
    });

    // Get all bills for this house
    const bills = await WaterBill.find({
      house: house._id
    }).sort({ createdAt: -1 }).limit(10);

    const gramPanchayat = await GramPanchayat.findById(gpId);

    res.json({
      success: true,
      data: {
        house: {
          ...house.toObject(),
          village: {
            ...house.village.toObject(),
            villageId: house.village._id
          }
        },
        latestBill,
        unpaidBillsCount,
        bills,
        canGenerateNewBill: true,
        gramPanchayat: {
          id: gramPanchayat._id,
          gramPanchayatId: gramPanchayat._id,
          name: gramPanchayat.name,
          uniqueId: gramPanchayat.uniqueId,
          waterTariff: gramPanchayat.waterTariff
        }
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

// @desc    Generate water bill for house
// @route   POST /api/biller/houses/:houseId/generate-bill
// @access  Private (Mobile User/Biller)
const generateWaterBill = async (req, res) => {
  try {
    const { houseId } = req.params;
    const { 
      previousReading, 
      currentReading, 
      totalUsage, 
      month, 
      year, 
      dueDate 
    } = req.body;

    const gpId = req.user.gramPanchayat._id;

    // Validate houseId format
    if (!mongoose.Types.ObjectId.isValid(houseId)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid house ID format'
      });
    }

    // Validate required fields
    if (previousReading === undefined || currentReading === undefined || totalUsage === undefined || !month || !year || !dueDate) {
      return res.status(400).json({
        success: false,
        message: 'All required fields must be provided'
      });
    }

    const house = await House.findOne({
      _id: houseId,
      gramPanchayat: gpId,
      isActive: true
    }).populate('village');

    if (!house) {
      return res.status(404).json({
        success: false,
        message: 'House not found or does not belong to your Gram Panchayat'
      });
    }

    // Validate readings
    const prevReading = parseFloat(previousReading);
    const currReading = parseFloat(currentReading);
    const usage = parseFloat(totalUsage);

    if (isNaN(prevReading) || isNaN(currReading) || isNaN(usage)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid reading values. Must be valid numbers'
      });
    }

    if (currReading < prevReading) {
      return res.status(400).json({
        success: false,
        message: 'Current reading cannot be less than previous reading'
      });
    }

    const calculatedUsage = currReading - prevReading;
    if (Math.abs(calculatedUsage - usage) > 0.01) {
      return res.status(400).json({
        success: false,
        message: 'Total usage calculation mismatch'
      });
    }

    const gramPanchayat = await GramPanchayat.findById(gpId);

    // Calculate bill amount using tariff
    const currentDemand = calculateWaterBill(usage, gramPanchayat.waterTariff, house.usageType);

    // Check for arrears from previous unpaid bills
    const unpaidBills = await WaterBill.find({
      house: house._id,
      status: { $in: ['pending', 'partial'] }
    });

    const arrears = roundToTwo(unpaidBills.reduce((sum, bill) => sum + bill.remainingAmount, 0));

    const bill = new WaterBill({
      house: house._id,
      gramPanchayat: gpId,
      month,
      year: parseInt(year),
      previousReading: prevReading,
      currentReading: currReading,
      totalUsage: usage,
      currentDemand: roundToTwo(currentDemand),
      arrears,
      interest: 0,
      others: 0,
      totalAmount: roundToTwo(currentDemand + arrears),
      remainingAmount: roundToTwo(currentDemand + arrears),
      dueDate: new Date(dueDate),
      status: 'pending' // Explicitly set status
    });

    await bill.save();

    // Update house previous reading
    house.previousMeterReading = currReading;
    await house.save();

    const populatedBill = await WaterBill.findById(bill._id).populate({
      path: 'house',
      populate: {
        path: 'village'
      }
    });

    res.status(201).json({
      success: true,
      message: 'Water bill generated successfully',
      data: {
        bill: populatedBill,
        gramPanchayat: {
          id: gramPanchayat._id,
          gramPanchayatId: gramPanchayat._id,
          name: gramPanchayat.name,
          uniqueId: gramPanchayat.uniqueId
        }
      }
    });
  } catch (error) {
    console.error('Bill generation error:', error);
    res.status(500).json({
      success: false,
      message: 'Water bill generation failed',
      error: error.message
    });
  }
};

// @desc    Get bill details
// @route   GET /api/biller/bills/:billId
// @access  Private (Mobile User/Biller)
const getBillDetails = async (req, res) => {
  try {
    const { billId } = req.params;
    const gpId = req.user.gramPanchayat._id;

    // Validate billId format
    if (!mongoose.Types.ObjectId.isValid(billId)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid bill ID format'
      });
    }

    const bill = await WaterBill.findOne({
      _id: billId,
      gramPanchayat: gpId
    }).populate({
      path: 'house',
      populate: {
        path: 'village'
      }
    });

    if (!bill) {
      return res.status(404).json({
        success: false,
        message: 'Bill not found or does not belong to your Gram Panchayat'
      });
    }

    // Get payment history
    const payments = await Payment.find({
      bill: bill._id
    }).populate('collectedBy', 'name').sort({ createdAt: -1 });

    const gramPanchayat = await GramPanchayat.findById(gpId);

    res.json({
      success: true,
      data: {
        bill,
        payments,
        gramPanchayat: {
          id: gramPanchayat._id,
          gramPanchayatId: gramPanchayat._id,
          name: gramPanchayat.name,
          uniqueId: gramPanchayat.uniqueId,
          qrCodeData: gramPanchayat.qrCodeData
        }
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

// @desc    Get final view bill with complete post-payment details
// @route   GET /api/biller/final-view-bill/:billId
// @access  Private (Mobile User/Biller)
const getFinalViewBill = async (req, res) => {
  try {
    const { billId } = req.params;
    const gpId = req.user.gramPanchayat._id;

    // Validate billId format
    if (!mongoose.Types.ObjectId.isValid(billId)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid bill ID format'
      });
    }

    const bill = await WaterBill.findOne({
      _id: billId,
      gramPanchayat: gpId
    }).populate({
      path: 'house',
      populate: {
        path: 'village'
      }
    });

    if (!bill) {
      return res.status(404).json({
        success: false,
        message: 'Bill not found or does not belong to your Gram Panchayat'
      });
    }

    // Get all payment transactions for this bill
    const payments = await Payment.find({
      bill: bill._id
    }).populate('collectedBy', 'name email').sort({ createdAt: -1 });

    // Get latest payment details
    const latestPayment = payments.length > 0 ? payments[0] : null;

    // Get Gram Panchayat details
    const gramPanchayat = await GramPanchayat.findById(gpId);

    // Prepare final bill view data with proper null checks
    const finalBillData = {
      // Bill identification
      billNumber: bill.billNumber || '',
      billDate: bill.createdAt,
      
      // Customer details with null safety
      customerName: bill.house?.ownerName || '',
      name: bill.house?.ownerName || '',
      mobileNumber: bill.house?.mobileNumber || '',
      address: bill.house?.address || '',
      village: bill.house?.village?.name || '',
      
      // Property details with null safety
      sequenceNumber: bill.house?.sequenceNumber || '',
      propertyNumber: bill.house?.propertyNumber || '',
      usageType: bill.house?.usageType || '',
      meterNumber: bill.house?.waterMeterNumber || '',
      
      // Meter readings
      previousReading: bill.previousReading || 0,
      currentReading: bill.currentReading || 0,
      totalUsage: bill.totalUsage || 0,
      
      // Bill amounts (with frontend field mapping and proper rounding)
      currentDemand: roundToTwo(bill.currentDemand || 0),
      demand: roundToTwo(bill.currentDemand || 0),
      arrears: roundToTwo(bill.arrears || 0),
      interest: roundToTwo(bill.interest || 0),
      others: roundToTwo(bill.others || 0),
      totalAmount: roundToTwo(bill.totalAmount || 0),
      amount: roundToTwo(bill.totalAmount || 0),
      billAmount: roundToTwo(bill.totalAmount || 0),
      paidAmount: roundToTwo(bill.paidAmount || 0),
      paid: roundToTwo(bill.paidAmount || 0),
      remainingAmount: roundToTwo(bill.remainingAmount || 0),
      remaining: roundToTwo(bill.remainingAmount || 0),
      
      // Payment details
      paymentStatus: bill.status || 'pending',
      paidDate: bill.paidDate,
      paymentMode: bill.paymentMode,
      transactionId: bill.transactionId,
      
      // Additional details
      dueDate: bill.dueDate,
      month: bill.month || '',
      year: bill.year || new Date().getFullYear(),
      
      // Payment history
      paymentHistory: payments || [],
      latestPayment,
      
      // GP details with null safety
      gramPanchayat: {
        id: gramPanchayat?._id || null,
        gramPanchayatId: gramPanchayat?._id || null,
        name: gramPanchayat?.name || '',
        uniqueId: gramPanchayat?.uniqueId || '',
        address: gramPanchayat?.address || '',
        contactPerson: gramPanchayat?.contactPerson || {},
        qrCodeData: gramPanchayat?.qrCodeData || {}
      },
      
      // Status flags
      isFullyPaid: bill.status === 'paid',
      isPartiallyPaid: bill.status === 'partial',
      isPending: bill.status === 'pending',
      hasArrears: roundToTwo(bill.remainingAmount || 0) > 0,
      isOverpaid: roundToTwo(bill.remainingAmount || 0) < 0
    };

    res.json({
      success: true,
      data: finalBillData
    });
  } catch (error) {
    console.error('Final view bill error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

// @desc    Process payment for bill
// @route   POST /api/biller/bills/:billId/payment
// @access  Private (Mobile User/Biller)
const processPayment = async (req, res) => {
  try {
    const { billId } = req.params;
    const { amount, paymentMode, transactionId, remarks } = req.body;
    const gpId = req.user.gramPanchayat._id;

    // Validate billId format
    if (!mongoose.Types.ObjectId.isValid(billId)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid bill ID format'
      });
    }

    // Validate required fields
    if (amount === undefined || amount === null || !paymentMode) {
      return res.status(400).json({
        success: false,
        message: 'Amount and payment mode are required'
      });
    }

    // Allow zero amount payments for special cases (like adjustments)
    const paymentAmount = roundToTwo(parseFloat(amount));
    
    if (isNaN(paymentAmount) || paymentAmount < 0) {
      return res.status(400).json({
        success: false,
        message: 'Payment amount must be a valid number and cannot be negative'
      });
    }

    // Validate transaction ID based on payment mode
    if ((paymentMode === 'upi' || paymentMode === 'online') && !transactionId) {
      return res.status(400).json({
        success: false,
        message: 'Transaction ID is required for UPI and online payments'
      });
    }

    const bill = await WaterBill.findOne({
      _id: billId,
      gramPanchayat: gpId
    });

    if (!bill) {
      return res.status(404).json({
        success: false,
        message: 'Bill not found or does not belong to your Gram Panchayat'
      });
    }

    // Create payment record
    const payment = new Payment({
      bill: bill._id,
      amount: paymentAmount,
      paymentMode,
      transactionId: (paymentMode === 'cash' || paymentMode === 'pay_later') ? null : transactionId,
      collectedBy: req.user.id,
      remarks
    });

    await payment.save();

    // Update bill only if not pay_later
    if (paymentMode !== 'pay_later') {
      bill.paidAmount = roundToTwo(bill.paidAmount + paymentAmount);
      bill.remainingAmount = roundToTwo(bill.totalAmount - bill.paidAmount);
      
      // Handle overpayment scenarios
      if (bill.remainingAmount <= 0) {
        bill.status = 'paid';
        // Keep negative remaining amount to track overpayment
      } else if (bill.paidAmount > 0) {
        bill.status = 'partial';
      }

      bill.paymentMode = paymentMode;
      bill.transactionId = (paymentMode === 'cash' || paymentMode === 'pay_later') ? null : transactionId;
      bill.paidDate = new Date(); // Set paid date

      await bill.save();
    }

    const updatedBill = await WaterBill.findById(bill._id).populate({
      path: 'house',
      populate: {
        path: 'village'
      }
    });

    const gramPanchayat = await GramPanchayat.findById(gpId);

    res.json({
      success: true,
      message: 'Payment processed successfully',
      data: {
        bill: updatedBill,
        payment,
        redirectToFinalView: true,
        finalViewUrl: `/api/biller/final-view-bill/${bill._id}`,
        gramPanchayat: {
          id: gramPanchayat._id,
          gramPanchayatId: gramPanchayat._id,
          name: gramPanchayat.name,
          uniqueId: gramPanchayat.uniqueId
        }
      }
    });
  } catch (error) {
    console.error('Payment processing error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

// @desc    Generate payment QR code for bill
// @route   GET /api/biller/bills/:billId/qr-code
// @access  Private (Mobile User/Biller)
const generatePaymentQRCode = async (req, res) => {
  try {
    const { billId } = req.params;
    const gpId = req.user.gramPanchayat._id;

    // Validate billId format
    if (!mongoose.Types.ObjectId.isValid(billId)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid bill ID format'
      });
    }

    const bill = await WaterBill.findOne({
      _id: billId,
      gramPanchayat: gpId
    }).populate('house');

    if (!bill) {
      return res.status(404).json({
        success: false,
        message: 'Bill not found or does not belong to your Gram Panchayat'
      });
    }

    const gramPanchayat = await GramPanchayat.findById(gpId);
    
    // Generate QR code even without UPI configuration
    const upiId = gramPanchayat.qrCodeData?.upiId || 'payment@gp.com';
    const merchantName = gramPanchayat.qrCodeData?.merchantName || gramPanchayat.name;

    const qrResult = await generatePaymentQR(
      bill.remainingAmount,
      upiId,
      merchantName,
      bill.billNumber
    );

    if (!qrResult.success) {
      return res.status(500).json({
        success: false,
        message: 'Failed to generate QR code',
        error: qrResult.error
      });
    }

    res.json({
      success: true,
      data: {
        qrCode: qrResult.qrCode,
        amount: bill.remainingAmount,
        billNumber: bill.billNumber,
        upiId: upiId,
        merchantName: merchantName,
        gramPanchayat: {
          id: gramPanchayat._id,
          gramPanchayatId: gramPanchayat._id,
          name: gramPanchayat.name,
          uniqueId: gramPanchayat.uniqueId
        }
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

// @desc    Generate QR code for GP (static QR code for all houses)
// @route   GET /api/biller/gp-qr-code
// @access  Private (Mobile User/Biller)
const generateGPQRCode = async (req, res) => {
  try {
    const gpId = req.user.gramPanchayat._id;
    const gramPanchayat = await GramPanchayat.findById(gpId);
    
    // Generate QR code even without UPI configuration
    const upiId = gramPanchayat.qrCodeData?.upiId || 'payment@gp.com';
    const merchantName = gramPanchayat.qrCodeData?.merchantName || gramPanchayat.name;

    // Generate static QR code for GP (no amount specified)
    const qrResult = await generatePaymentQR(
      0, // No fixed amount for static QR
      upiId,
      merchantName,
      `GP-${gramPanchayat.uniqueId}`
    );

    if (!qrResult.success) {
      return res.status(500).json({
        success: false,
        message: 'Failed to generate QR code',
        error: qrResult.error
      });
    }

    res.json({
      success: true,
      data: {
        qrCode: qrResult.qrCode,
        upiId: upiId,
        merchantName: merchantName,
        gramPanchayat: {
          id: gramPanchayat._id,
          gramPanchayatId: gramPanchayat._id,
          name: gramPanchayat.name,
          uniqueId: gramPanchayat.uniqueId
        },
        isStaticQR: true,
        description: 'Static QR code for all payments to this Gram Panchayat'
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

// @desc    Download bill PDF
// @route   GET /api/biller/bills/:billId/pdf
// @access  Private (Mobile User/Biller)
const downloadBillPDF = async (req, res) => {
  try {
    const { billId } = req.params;
    const gpId = req.user.gramPanchayat._id;

    // Validate billId format
    if (!mongoose.Types.ObjectId.isValid(billId)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid bill ID format'
      });
    }

    const bill = await WaterBill.findOne({
      _id: billId,
      gramPanchayat: gpId
    }).populate({
      path: 'house',
      populate: {
        path: 'village'
      }
    });

    if (!bill) {
      return res.status(404).json({
        success: false,
        message: 'Bill not found or does not belong to your Gram Panchayat'
      });
    }

    const gramPanchayat = await GramPanchayat.findById(gpId);
    const pdfPath = await generateBillPDF(bill, bill.house, gramPanchayat);
    
    res.download(pdfPath, `bill_${bill.billNumber}.pdf`, (err) => {
      if (err) {
        console.error('PDF download error:', err);
      }
      // Clean up temp file
      require('fs').unlinkSync(pdfPath);
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

// @desc    Download final bill receipt PDF (post-payment)
// @route   GET /api/biller/final-view-bill/:billId/print
// @access  Private (Mobile User/Biller)
const downloadFinalBillReceipt = async (req, res) => {
  try {
    const { billId } = req.params;
    const gpId = req.user.gramPanchayat._id;

    // Validate billId format
    if (!mongoose.Types.ObjectId.isValid(billId)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid bill ID format'
      });
    }

    const bill = await WaterBill.findOne({
      _id: billId,
      gramPanchayat: gpId
    }).populate({
      path: 'house',
      populate: {
        path: 'village'
      }
    });

    if (!bill) {
      return res.status(404).json({
        success: false,
        message: 'Bill not found or does not belong to your Gram Panchayat'
      });
    }

    // Get payment details
    const payments = await Payment.find({
      bill: bill._id
    }).populate('collectedBy', 'name').sort({ createdAt: -1 });

    const gramPanchayat = await GramPanchayat.findById(gpId);

    const receiptData = {
      bill,
      house: bill.house,
      payments,
      gramPanchayat,
      generatedBy: req.user.name,
      generatedAt: new Date()
    };

    const pdfPath = await generateReceiptPDF(receiptData);
    
    res.download(pdfPath, `receipt_${bill.billNumber}.pdf`, (err) => {
      if (err) {
        console.error('Receipt PDF download error:', err);
      }
      // Clean up temp file
      require('fs').unlinkSync(pdfPath);
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

// @desc    Get biller profile
// @route   GET /api/biller/profile
// @access  Private (Mobile User/Biller)
const getBillerProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user.id)
      .select('-password')
      .populate('gramPanchayat');

    res.json({
      success: true,
      data: {
        user,
        gramPanchayat: {
          id: user.gramPanchayat._id,
          gramPanchayatId: user.gramPanchayat._id,
          name: user.gramPanchayat.name,
          uniqueId: user.gramPanchayat.uniqueId,
          district: user.gramPanchayat.district,
          taluk: user.gramPanchayat.taluk,
          address: user.gramPanchayat.address,
          contactPerson: user.gramPanchayat.contactPerson
        }
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

module.exports = {
  getDashboard,
  searchCustomers,
  getVillages,
  createHouse,
  getHouseDetails,
  generateWaterBill,
  getBillDetails,
  getFinalViewBill,
  processPayment,
  generatePaymentQRCode,
  generateGPQRCode,
  downloadBillPDF,
  downloadFinalBillReceipt,
  getBillerProfile
};